import cv2
import numpy as np



def message_to_binary(message):
    return ''.join(format(ord(char), '08b') for char in message) + '1111111100000000'  # Marqueur de fin unique

def binary_to_message(binary_data):
    chars = [binary_data[i:i+8] for i in range(0, len(binary_data), 8)]
    message = ''
    for char in chars:
        if char == '11111111':  # Détection du marqueur de fin
            break
        message += chr(int(char, 2))
    return message

def hide_message(image_path, message, output_path):
    image = cv2.imread(image_path)
    if image is None:
        raise ValueError("Impossible de charger l'image. Vérifie le chemin.")

    binary_message = message_to_binary(message)
    message_len = len(binary_message)
    max_capacity = image.size  # nb total de pixels * 3 (car 3 canaux par pixel)

    if message_len > max_capacity:
        raise ValueError("Le message est trop long pour cette image.")

    flat_image = image.flatten()

    for i in range(message_len):
        flat_image[i] = (flat_image[i] & 0xFE) | int(binary_message[i])

    # Remet l'image à sa forme d'origine
    modified_image = flat_image.reshape(image.shape)

    cv2.imwrite(output_path, modified_image)
    print("Message caché avec succès !")


def extract_message(image_path):
    image = cv2.imread(image_path)
    if image is None:
        raise ValueError("Impossible de charger l'image. Vérifie le chemin.")

    # Récupère uniquement les bits de poids faible (LSB) de toute l'image en une seule opération
    lsb_bits = (image & 1).flatten()  # Aplatit l'image 3D en un tableau 1D de bits

    # Convertit les bits en chaîne de caractères
    binary_data = ''.join(map(str, lsb_bits))

  

    # Cherche le marqueur de fin
    end_index = binary_data.find("1111111100000000")
    if end_index != -1:
        binary_data = binary_data[:end_index]

   

    message = binary_to_message(binary_data)
    print(" Message extrait avec succès !")
    return message


# TTTTTTTTEEEEEEEEESSSSSSSSSSSTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
image_path =  r"C:\Users\ASUS TUF\Documents\PFE\yaya.jpg"  # Image source
message = "Hello World"  # Message à cacher
output_path = r"C:\Users\ASUS TUF\Documents\PFE\stego_image.png"  # Image finale (éviter JPEG à cause de la compression)

hide_message(image_path, message, output_path)
extracted_message = extract_message(output_path)
print(" Message extrait :", extracted_message)
